/*
 * Copyright (C) 2017 - 2019 Xilinx, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 */

/** Connection handle for a UDP Server session */

#include "udp_server.h"
#include <stdio.h>
#include <string.h>
#include <xil_io.h>

#include "lwip/err.h"
#include "lwip/pbuf.h"
#include "lwip/udp.h"
#include "lwip/tcp.h"
#if defined (__arm__) || defined (__aarch64__)
#include "xil_printf.h"
#endif
#include "../version.h"



//extern u8 current_ch;

//#define PRINT_REMOTE

#ifdef PRINT_REMOTE
#include "lwip/inet.h"
extern struct netif *echo_netif;
#endif

extern struct netif server_netif;
static struct udp_pcb *pcb = NULL;
struct pbuf *pbuf_to_be_sent;
ip_addr_t target_addr;
char sendchannel[2] = {0,0};
unsigned char targetPicHeader[9]={0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

void print_app_header(void)
{
	xil_printf("UDP server listening on port %d\r\n",
			UDP_CONN_PORT);
}

uint8_t checksum(uint8_t * ptr, int16_t cnt)
{
	int16_t i = 0;
	uint8_t calc=0;
	for(i=0;i<cnt;i++)
	{
		calc=calc + ptr[i];
	}

	return calc=~calc&0xff;
}

/*
 * 向客户端回送消息
 *
 */
int transfer_data(const char *pData, int len, const ip_addr_t *addr, u16_t port)
{
	static struct pbuf *udp_pbuf;

	udp_pbuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_POOL);
	if (!udp_pbuf)
		xil_printf("Error allocating pbuf\r\n");

	memcpy(udp_pbuf->payload, pData, len);

	//发送报文
    if (udp_sendto(pcb, udp_pbuf, addr, port) != ERR_OK)
    	xil_printf("UDP send error\r\n");

    //释放pbuf
    pbuf_free(udp_pbuf);

	return 0;
}


/*
 * Send frame data with udp
 *
 * @param pic is frame pointer will be send
 * @param piclen is frame length in one package
 * @param sn is Serial number for each ethernet package
 *
 * @format
 * @HeaderFormat  9*bytes
 *
 */

int sendpic(const unsigned char *pic, int piclen, int sn)
{
	err_t err;
	targetPicHeader[0] = (piclen + 9) >> 8;
	targetPicHeader[1] = (piclen + 9) ;
	targetPicHeader[4] = 0x81;
	targetPicHeader[6] = sn>>16;
	targetPicHeader[7] = sn>>8;
	targetPicHeader[8] = sn>>0;

	memcpy(pbuf_to_be_sent->payload, targetPicHeader, 9);
	memcpy(pbuf_to_be_sent->payload+9, pic, piclen);
	pbuf_to_be_sent->len = pbuf_to_be_sent->tot_len = 9+piclen;

	err = udp_sendto(pcb, pbuf_to_be_sent, &target_addr, DIST_CONN_PORT);//发送到指定IP和端口
    //发送报文
	 if (err != ERR_OK)
	{
		xil_printf("Error on udp send : %d\r\n", err);
		return;
	}

	return 0;
}

#if 0
/**
  * @brief This function is called when an UDP datagrm has been received on the port UDP_PORT.
  * @param arg user supplied argument (udp_pcb.recv_arg)
  * @param pcb the udp_pcb which received data
  * @param p the packet buffer that was received
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */

void recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,const ip_addr_t *addr, u16_t port)
{
	  /* Connect to the remote client */
	  udp_connect(upcb, addr, port);
#ifdef PRINT_REMOTE
	  xil_printf("local %s port %d connected with ",
	  			inet_ntoa(echo_netif->ip_addr),
				echo_server_port);
	  xil_printf("%s port %d\r\n", inet_ntoa(*addr),
			  port);
#endif
	  /* Tell the client that we have accepted it */
	  udp_send(upcb, p);

	  /* free the UDP connection, so we can accept new clients */
	  udp_disconnect(upcb);

	  /* Free the p buffer */
	  pbuf_free(p);
}
#endif

#if 1
uint8_t receivebuf[1500] = {0};
uint8_t send_buf[1500] = {0};
uint8_t str[8];
uint8_t str2[8];
uint8_t smdata[4];
uint8_t smaddr[4];
int receivelen = 0;
int sendlen = 0;
int receivebufdecodelen = 0;
int sendencodelen=0;
uint32_t iic_status=0;
uint32_t spi_status=0;
uint8_t spi_recv_buf[256]={0};
uint8_t spi_recv_len=0;
uint8_t spi_send_byte=0;
uint8_t iic_data_buf[256]={0};
uint8_t iic_data_len=0;

void recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,const ip_addr_t *addr, u16_t port)
{
    struct pbuf *pq;
	receivelen = p->len;
	memset(receivebuf, 0, sizeof(receivebuf));
	memset(send_buf, 0, sizeof(send_buf));
	memcpy(receivebuf,p->payload,p->len);
    pbuf_free(p);

    int32_t Status=0;
    uint16_t msg_len=0;
    uint16_t msg_cmd=0;
    uint32_t msg_addr=0;
    uint32_t msg_value=0;
    uint8_t msg_ack=0;
    uint16_t mem_len=0;

//	xil_printf("%d.%d.%d.%d\r\n", ip4_addr1(addr), ip4_addr2(addr),
//			ip4_addr3(addr), ip4_addr4(addr));
//	xil_printf("port  : %d\r\n",port);

//    xil_printf("receive data : %x\r\n",receivebuf[4]);
//    xil_printf("msg_cmd : %x\r\n",*(receivebuf+4));


//    transfer_data(receivebuf, receivelen, addr, port);

    memcpy(&msg_len,receivebuf,2);
    memcpy(&msg_cmd,receivebuf+4,1);

    if(msg_cmd==0x10)	// read mem addr
    {
    	memcpy(&msg_addr,receivebuf+5,4);
    	msg_value = Xil_In32(msg_addr); // don't use signed int, otherwise hardfail
    	//mdata=htonl(mdata);
    	memcpy(send_buf,receivebuf,receivelen);
    	sendlen=receivelen;
    	//memcpy(send_buf,&sendlen,2);
    	memcpy(send_buf+9,&msg_value,4);
    	send_buf[sendlen-1] = checksum(send_buf,sendlen-1); // 计算除checksum外的全部
    	memcpy(send_buf,&sendlen,2);
    }
    if(msg_cmd==0x11)	// write mem addr
	{
		memcpy(&msg_addr,receivebuf+5,4);
		memcpy(&msg_value,receivebuf+9,4);
		//msg_value=htonl(msg_value);
		//*(volatile unsigned int *)(msg_addr) = msg_value;
		Xil_Out32(msg_addr, msg_value);
		msg_value = Xil_In32(msg_addr); // don't use signed int, otherwise hardfail

		memcpy(send_buf,receivebuf,receivelen);
		sendlen=receivelen;
		//memcpy(send_buf,&sendlen,2);
		memcpy(send_buf+9,&msg_value,4);
		send_buf[sendlen-1] = checksum(send_buf,sendlen-1); // 计算除checksum外的全部
		memcpy(send_buf,&sendlen,2);
	}
    if(msg_cmd==0x12)	// read mem bulk
	{
		memcpy(&msg_addr,receivebuf+5,4);
		memcpy(&mem_len,receivebuf+9,4);
		memcpy(send_buf,receivebuf,receivelen);
		memcpy(send_buf+receivelen-1,(void*)msg_addr,mem_len*4);
		sendlen=receivelen+mem_len*4;
		memcpy(send_buf,&sendlen,2);
		send_buf[sendlen-1] = checksum(send_buf,sendlen-1); // 计算除checksum外的全部
	}
    if(msg_cmd==0x13)	// write mem bulk
	{
		memcpy(&msg_addr,receivebuf+5,4);
		memcpy(&mem_len,receivebuf+9,4);
		memcpy((void*)msg_addr,receivebuf+13,mem_len*4);
		sendlen=receivelen-mem_len*4;
		memcpy(send_buf,receivebuf,sendlen);
//		memcpy(send_buf,&sendlen,2);
		send_buf[sendlen-1] = checksum(send_buf,sendlen-1); // 计算除checksum外的全部
		memcpy(send_buf,&sendlen,2);
	}


    if(msg_cmd==0x40) // variables get and set
    {
    	uint16_t cmd_index;
    	uint32_t msg_send;
		memcpy(&cmd_index,receivebuf+5,2);

		if(cmd_index==1)
		{
//			uint16_t major = __SW_VER_MAJOR__;
//			uint16_t minor = __SW_VER_MINOR__;
			uint32_t ver = __SW_VER__;
//			msg_send = (uint32_t)(((uint32_t)major)<<16) + (uint32_t)minor;
			msg_send = ver;

			memcpy(send_buf,receivebuf,7);
			memcpy(send_buf+7,&msg_send,4);
			sendlen = 12;
			send_buf[sendlen-1] = checksum(send_buf,sendlen-1); // 计算除checksum外的全部
			memcpy(send_buf,&sendlen,2);
		}
		if(cmd_index==2) // 查询global_config
		{
			memcpy(send_buf,receivebuf,7);
			memcpy(send_buf+7, &global_config, sizeof(config_Settings_t));
			sendlen = 7 + sizeof(config_Settings_t) + 1;
			send_buf[sendlen-1] = checksum(send_buf,sendlen-1); // 计算除checksum外的全部
			memcpy(send_buf,&sendlen,2);
		}
		if(cmd_index==3) // 写入global_config
		{
			int32_t Status;
			uint8_t sendmsg;
			memcpy(&global_config,receivebuf+7,sizeof(config_Settings_t));
//			memcpy(&(global_config.frequency_Hz),receivebuf+29,sizeof(int64_t));
//			memcpy(&(global_config.agc_mode),receivebuf+37,1);
			// U34 choose port 0
//			I2cMux_Eeprom();
//			Status = saveconfig(&global_config);

			if(Status!=XST_SUCCESS)
			{
				sendmsg = 1;
			}
			else
			{
				sendmsg = 0;
			}

			memcpy(send_buf,receivebuf,7);
			memcpy(send_buf+7,&msg_send,1);
			sendlen = 7 + 1 + 1;
			send_buf[sendlen-1] = checksum(send_buf,sendlen-1); // 计算除checksum外的全部
			memcpy(send_buf,&sendlen,2);
		}
		if(cmd_index==12) // 查询default_config
		{
			memcpy(send_buf,receivebuf,7);
			memcpy(send_buf+7, &default_config, sizeof(config_Settings_t));
			sendlen = 7 + sizeof(config_Settings_t) + 1;
			send_buf[sendlen-1] = checksum(send_buf,sendlen-1); // 计算除checksum外的全部
			memcpy(send_buf,&sendlen,2);
		}
//		if(cmd_index==4)// cur_ch_get
//		{
//			memcpy(send_buf,receivebuf,7);
//			memcpy(send_buf+7,&current_ch,1);
//			sendlen = 9;
//			send_buf[sendlen-1] = checksum(send_buf,sendlen-1); // 计算除checksum外的全部
//			memcpy(send_buf,&sendlen,2);
//		}
//		if(cmd_index==5) //cur_ch_set
//		{
//			uint8_t var1;
//			memcpy(&var1,receivebuf+7,1);
//			current_ch = var1;
//			memcpy(send_buf,receivebuf,7);
//			memcpy(send_buf+7,&msg_send,1);
//			sendlen = 7 + 1 + 1;
//			send_buf[sendlen-1] = checksum(send_buf,sendlen-1); // 计算除checksum外的全部
//			memcpy(send_buf,&sendlen,2);
//		}
    }

    if(msg_cmd == 0x80)	// cemare control
	{
    	if( receivebuf[6] == 0x00)  //Turn off the image display of the host computer
    	{
			sendchannel[0] = 0;
			sendchannel[1] = 0;
			xil_printf("close all video source\r\n");
    	}


    	else
		{
			if(receivebuf[5] == 0x01)
			{
				sendchannel[0] = 1;
				sendchannel[1] = 0;
				xil_printf("only choose first video source\r\n");
				vdma_init(0);
			}
			else if(receivebuf[5] == 0x02)
			{
				sendchannel[0] = 0;
				sendchannel[1] = 1;
				xil_printf("only choose second video source\r\n");
				vdma_init(1);
			}
			else if(receivebuf[5] == 0x03)
			{
				sendchannel[0] = 1;
				sendchannel[1] = 1;
				xil_printf("choose first and second video source\r\n");
				vdma_init(0);
				vdma_init(1);
			}
			else
			{
				xil_printf("video source cmd error\r\n");
			}
		}

	}
    else
    {
		pq = pbuf_alloc(PBUF_TRANSPORT,sendlen,PBUF_POOL);
		pbuf_take(pq,(char*)send_buf,sendlen);

		udp_connect(upcb, addr, port);
	#ifdef PRINT_REMOTE
		  xil_printf("local %s port %d connected with ",
					inet_ntoa(echo_netif->ip_addr),
					echo_server_port);
		  xil_printf("%s port %d\r\n", inet_ntoa(*addr),
				  port);
	#endif
		udp_send(upcb,pq);
		udp_disconnect(upcb);
		pbuf_free(pq);
	}

}
#endif


void print_ip(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf("%d.%d.%d.%d\r\n", ip4_addr1(ip), ip4_addr2(ip),
			ip4_addr3(ip), ip4_addr4(ip));
}

void print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{
	print_ip("Board IP:       ", ip);
	print_ip("Netmask :       ", mask);
	print_ip("Gateway :       ", gw);
}

void assign_default_ip(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{
	int err;

	xil_printf("Configuring default IP %s \r\n", DEFAULT_IP_ADDRESS);

	err = inet_aton(DEFAULT_IP_ADDRESS, ip);
	if (!err)
		xil_printf("Invalid default IP address: %d\r\n", err);

	err = inet_aton(DEFAULT_IP_MASK, mask);
	if (!err)
		xil_printf("Invalid default IP MASK: %d\r\n", err);

	err = inet_aton(DEFAULT_GW_ADDRESS, gw);
	if (!err)
		xil_printf("Invalid default gateway address: %d\r\n", err);
}

void start_application(u16 pbuf_lenth)
{
	err_t err;

	/* Create Server PCB */
	pcb = udp_new();
	if (!pcb) {
		xil_printf("UDP server: Error creating PCB. Out of Memory\r\n");
		return;
	}

	err = udp_bind(pcb, IP_ADDR_ANY, UDP_CONN_PORT);
	if (err != ERR_OK) {
		xil_printf("UDP server: Unable to bind to port");
		xil_printf(" %d: err = %d\r\n", UDP_CONN_PORT, err);
		udp_remove(pcb);
		return;
	}

	/* specify callback to use for incoming connections */
	udp_recv(pcb, recv_callback, NULL);
	IP4_ADDR(&target_addr, 192,168,1,77);


	/*  申请pbuf资源  */
	pbuf_to_be_sent = pbuf_alloc(PBUF_TRANSPORT, pbuf_lenth, PBUF_RAM);
	if(!pbuf_to_be_sent)
	{
		xil_printf("pbuf_alloc %d fail\n\r", pbuf_lenth+9);
		return -3;
	}
	memset(pbuf_to_be_sent->payload, 0, pbuf_to_be_sent->len);

	return;
}

